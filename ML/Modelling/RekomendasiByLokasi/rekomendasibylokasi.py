# -*- coding: utf-8 -*-
"""RekomendasibyLokasi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1la41TRa437smn7JE2GEqIJ644PrvzNjr

## **🌍 Pemilihan Algoritma untuk Rekomendasi Berdasarkan Lokasi**

🔍 **Strategi**: Data input dari pengguna berbentuk kombinasi **fitur numerik (suhu rata-rata)** dan **kategorikal (iklim)**. Model perlu menangani **relasi non-linear** dan mampu **beradaptasi** jika fitur bertambah seiring integrasi sistem.

🧠 **Keputusan**: Dipilih algoritma **Neural Network (MLP via TensorFlow)** karena:
- Mendukung **representasi kompleks** dari fitur campuran.
- Cocok untuk **pengembangan jangka panjang**, seperti integrasi ke API dan deployment.
- Dapat dioptimalkan dengan **early stopping, dropout**, dan teknik regularisasi lainnya.

📊 **Alternatif seperti** SVM memiliki performa kuat untuk margin klasifikasi, tetapi sulit di-_scale_ dan lambat untuk _inference_ pada data besar. XGBoost sangat baik untuk tabular, tapi arsitekturnya kurang fleksibel dibanding model neural modern dalam konteks integrasi real-time dan fine-tuning.

---

### 📋 Tabel Perbandingan Algoritma

| Aspek Evaluasi                  | ✅ MLP (TensorFlow)            | 🟡 SVM (Support Vector Machine) | 🔴 XGBoost                      |
|----------------------------------|-------------------------------|----------------------------------|--------------------------------|
| Tangani Fitur Campuran          | ✔️ Sangat Baik                | ⚠️ Perlu preprocessing           | ✔️ Baik                        |
| Dukungan Non-Linearitas         | ✔️ Sangat Fleksibel           | ✔️ Kuat via kernel               | ✔️ Via boosting trees          |
| Skalabilitas Model              | ✔️ Sangat Tinggi              | ❌ Kurang baik                   | ⚠️ Menengah                   |
| Deployment & Integrasi API      | ✔️ Mudah via TensorFlow       | ❌ Kompleks                      | ⚠️ Perlu konversi model       |
| Regularisasi & Overfitting Ctrl | ✔️ Dropout, EarlyStop         | ⚠️ Terbatas                     | ✔️ Built-in                    |
| Interpretabilitas               | ⚠️ Rendah                     | ⚠️ Sulit                        | ✔️ Cukup jelas                |

---

📌 Kesimpulan: **MLP TensorFlow** unggul dalam fleksibilitas dan kemampuan generalisasi untuk integrasi web dan pengembangan sistem jangka panjang. Ini membuatnya ideal untuk konteks rekomendasi tanaman berbasis lokasi dengan data campuran.

## **1️⃣ Install & Import Library**
"""

import pandas as pd
import numpy as np
import gdown
import tensorflow as tf
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

"""## **2️⃣ Download & Load Dataset Houseplants**"""

url = "https://drive.google.com/uc?id=1tE628fdnq32SR8_LrZxJGoTAZ8bTCFvu"
gdown.download(url, "Houseplants.csv", quiet=False)
df = pd.read_csv("Houseplants.csv")
df.head(5)

"""## **3️⃣ Preprocessing Data**"""

df = df.dropna(subset=["climate", "tempmin_celsius", "tempmax_celsius", "combined", "latin"])
df['avg_temp'] = (df['tempmin_celsius'] + df['tempmax_celsius']) / 2

"""## **4️⃣ Encode Categorical Feature**"""

df['climate_cat'] = df['climate'].astype('category').cat.codes
climate_encoder = dict(zip(df['climate'], df['climate_cat']))

X = df[['climate_cat', 'avg_temp']].values

label_encoder = LabelEncoder()
y = label_encoder.fit_transform(df['latin'])

"""## **5️⃣ Train Neural Network Classifier (TensorFlow)**"""

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build model
model = tf.keras.Sequential([
    tf.keras.layers.Input(shape=(2,)),
    tf.keras.layers.Dense(16, activation='relu'),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(len(np.unique(y)), activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Train model
model.fit(X_train, y_train, epochs=50, verbose=0)

"""## **6️⃣ Fungsi Prediksi Berdasarkan Lokasi (Content-Based)**"""

recommendation_history_location = set()

def recommend_plants_by_location(climate_input, temp_input, top_n=3, reset=False):
    global recommendation_history_location

    if reset:
        recommendation_history_location = set()

    # Encode iklim
    matching_climates = df[df['climate'].str.contains(climate_input, case=False, na=False)]
    if matching_climates.empty:
        return ["Iklim tidak dikenali"]

    climate_code = matching_climates['climate_cat'].mode().iloc[0]
    user_input = np.array([[climate_code, temp_input]])

    preds = model.predict(user_input, verbose=0)[0]
    prob_df = pd.DataFrame({
        'latin': label_encoder.inverse_transform(np.arange(len(preds))),
        'prob': preds
    })
    prob_df = prob_df[~prob_df['latin'].isin(recommendation_history_location)]

    top_latin = prob_df.sort_values(by='prob', ascending=False)['latin'].head(top_n).tolist()
    recommendation_history_location.update(top_latin)

    return df[df['latin'].isin(top_latin)][['latin', 'climate', 'avg_temp']].drop_duplicates('latin')

"""## **7️⃣ Contoh Penggunaan**"""

recommend_plants_by_location(climate_input="Tropical", temp_input=25, reset=False)

"""## **8️⃣ Simpan Model TensorFlow ke File .h5**"""

# model.save("RekomendasibyLokasi_model.h5")